//
//  main.cpp
//  AES
//
//  Created by Claire Bowling on 9/15/22.
//

#include <iostream>

using namespace std;

unsigned char state [4][4];
int numCycles = 9; // 10 cycles total since we are using 128 bit key
string myPlainText = "rosesareredvioletsareblue";
string myKey = "hydrangeahydrang";
unsigned char *encryptedMessage;

void keyExpansion();
void AddRoundKey(unsigned char * , unsigned char * );
void SubBytes();
void ShiftRows();
void MixColumns();
void Round(unsigned char * , unsigned char * );
void FinalRound(unsigned char * , unsigned char * );
void AESEncrypt(unsigned char * , unsigned char * , unsigned char * );

// 16x16 S-box from https://en.wikipedia.org/wiki/Rijndael_S-box
int sBoxVal(int index){
    unsigned char sBox[256] =   {
        0x63, 0x7c, 0x77, 0x7b, 0xf2, 0x6b, 0x6f, 0xc5, 0x30, 0x01, 0x67, 0x2b, 0xfe, 0xd7, 0xab, 0x76,
        0xca, 0x82, 0xc9, 0x7d, 0xfa, 0x59, 0x47, 0xf0, 0xad, 0xd4, 0xa2, 0xaf, 0x9c, 0xa4, 0x72, 0xc0,
        0xb7, 0xfd, 0x93, 0x26, 0x36, 0x3f, 0xf7, 0xcc, 0x34, 0xa5, 0xe5, 0xf1, 0x71, 0xd8, 0x31, 0x15,
        0x04, 0xc7, 0x23, 0xc3, 0x18, 0x96, 0x05, 0x9a, 0x07, 0x12, 0x80, 0xe2, 0xeb, 0x27, 0xb2, 0x75,
        0x09, 0x83, 0x2c, 0x1a, 0x1b, 0x6e, 0x5a, 0xa0, 0x52, 0x3b, 0xd6, 0xb3, 0x29, 0xe3, 0x2f, 0x84,
        0x53, 0xd1, 0x00, 0xed, 0x20, 0xfc, 0xb1, 0x5b, 0x6a, 0xcb, 0xbe, 0x39, 0x4a, 0x4c, 0x58, 0xcf,
        0xd0, 0xef, 0xaa, 0xfb, 0x43, 0x4d, 0x33, 0x85, 0x45, 0xf9, 0x02, 0x7f, 0x50, 0x3c, 0x9f, 0xa8,
        0x51, 0xa3, 0x40, 0x8f, 0x92, 0x9d, 0x38, 0xf5, 0xbc, 0xb6, 0xda, 0x21, 0x10, 0xff, 0xf3, 0xd2,
        0xcd, 0x0c, 0x13, 0xec, 0x5f, 0x97, 0x44, 0x17, 0xc4, 0xa7, 0x7e, 0x3d, 0x64, 0x5d, 0x19, 0x73,
        0x60, 0x81, 0x4f, 0xdc, 0x22, 0x2a, 0x90, 0x88, 0x46, 0xee, 0xb8, 0x14, 0xde, 0x5e, 0x0b, 0xdb,
        0xe0, 0x32, 0x3a, 0x0a, 0x49, 0x06, 0x24, 0x5c, 0xc2, 0xd3, 0xac, 0x62, 0x91, 0x95, 0xe4, 0x79,
        0xe7, 0xc8, 0x37, 0x6d, 0x8d, 0xd5, 0x4e, 0xa9, 0x6c, 0x56, 0xf4, 0xea, 0x65, 0x7a, 0xae, 0x08,
        0xba, 0x78, 0x25, 0x2e, 0x1c, 0xa6, 0xb4, 0xc6, 0xe8, 0xdd, 0x74, 0x1f, 0x4b, 0xbd, 0x8b, 0x8a,
        0x70, 0x3e, 0xb5, 0x66, 0x48, 0x03, 0xf6, 0x0e, 0x61, 0x35, 0x57, 0xb9, 0x86, 0xc1, 0x1d, 0x9e,
        0xe1, 0xf8, 0x98, 0x11, 0x69, 0xd9, 0x8e, 0x94, 0x9b, 0x1e, 0x87, 0xe9, 0xce, 0x55, 0x28, 0xdf,
        0x8c, 0xa1, 0x89, 0x0d, 0xbf, 0xe6, 0x42, 0x68, 0x41, 0x99, 0x2d, 0x0f, 0xb0, 0x54, 0xbb, 0x16};
    return sBox[index];
};

/* 16x16 rcon from https://en.wikipedia.org/wiki/Rijndael_key_schedule, used for deriving a subkey*/
unsigned char rcon[256] = {
    0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a,
    0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39,
    0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a,
    0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8,
    0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef,
    0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc,
    0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20, 0x40, 0x80, 0x1b,
    0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3,
    0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94,
    0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04, 0x08, 0x10, 0x20,
    0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63, 0xc6, 0x97, 0x35,
    0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd, 0x61, 0xc2, 0x9f,
    0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d, 0x01, 0x02, 0x04,
    0x08, 0x10, 0x20, 0x40, 0x80, 0x1b, 0x36, 0x6c, 0xd8, 0xab, 0x4d, 0x9a, 0x2f, 0x5e, 0xbc, 0x63,
    0xc6, 0x97, 0x35, 0x6a, 0xd4, 0xb3, 0x7d, 0xfa, 0xef, 0xc5, 0x91, 0x39, 0x72, 0xe4, 0xd3, 0xbd,
    0x61, 0xc2, 0x9f, 0x25, 0x4a, 0x94, 0x33, 0x66, 0xcc, 0x83, 0x1d, 0x3a, 0x74, 0xe8, 0xcb, 0x8d
};

int main() {
    char message[16];
    
    for (int i = 0; i < 16; i++){
        for (int j = 0; j < myPlainText.length(); j++)
        message[i] = myPlainText[j] ;
    }
    
    unsigned long lengthOrigMsg = myPlainText.length();

    unsigned long paddedMessageLen = lengthOrigMsg;
    // make sure message is 16 bytes long
    if ((paddedMessageLen % 16) != 0) {
        paddedMessageLen = (paddedMessageLen / 16 + 1) * 16;
    }

    unsigned char * paddedMessage = new unsigned char[paddedMessageLen];
    for (int i = 0; i < paddedMessageLen; i++) {
        if (i >= lengthOrigMsg) {
            paddedMessage[i] = 0;
        }
        else {
            paddedMessage[i] = message[i];
        }
    }
    unsigned char expandedKey[16];
    unsigned char t[16];
    for(int i = 0; i < 4; ++i){
        t[i] = expandedKey[(i-4) + i];
        expandedKey[i] = expandedKey[(i - myKey.length())] ^ t[i];
    }
    unsigned char * encryptedMessage = new unsigned char[paddedMessageLen];
    keyExpansion();

    for (int i = 0; i < paddedMessageLen; i += 16) {
        AESEncrypt(paddedMessage+i, expandedKey, encryptedMessage+i);
    }
    
    cout << "Ciphertext:" << endl;
    for (int i = 0; i < paddedMessageLen; i++) {
        cout << hex << (int) encryptedMessage[i];
        cout << " ";
    }

    cout << endl;

    return 0;
}

void keyExpansion() {
    int i,j;
    int size = myKey.length();
    unsigned char Key[size];
    for (int i = 0; i < size; i++){
        Key[i] = myKey[i];
    }
    unsigned char RoundKey[size];
   unsigned char temp[4],k;
    
   // round 1
   for (i=0 ; i < 8 ; i++) {
      RoundKey[i*4] = Key[i*4];
      RoundKey[i*4+1] = Key[i*4+1];
      RoundKey[i*4+2] = Key[i*4+2];
      RoundKey[i*4+3] = Key[i*4+3];
   }

   // other round keys
   while (i < (10 * (9+1))) {
      for (j=0 ; j < 4 ; j++) {
     temp[j] = RoundKey[(i-1) * 4 + j];
      }
       
    if (i % 4 == 0) {
     k = temp[0];
     temp[0] = temp[1];
     temp[1] = temp[2];
     temp[2] = temp[3];
     temp[3] = k;
     
     temp[0] = sBoxVal(temp[0]);
     temp[1] = sBoxVal(temp[1]);
     temp[2] = sBoxVal(temp[2]);
     temp[3] = sBoxVal(temp[3]);

        temp[0] =  temp[0] ^ rcon[i/4];
      } else if (4 > 6 && i % 4 == 4) {
     // Function Subword()
     temp[0] = sBoxVal(temp[0]);
     temp[1] = sBoxVal(temp[1]);
     temp[2] = sBoxVal(temp[2]);
     temp[3] = sBoxVal(temp[3]);
      }
      RoundKey[i*4+0] = RoundKey[(i-4)*4+0] ^ temp[0];
      RoundKey[i*4+1] = RoundKey[(i-4)*4+1] ^ temp[1];
      RoundKey[i*4+2] = RoundKey[(i-4)*4+2] ^ temp[2];
      RoundKey[i*4+3] = RoundKey[(i-4)*4+3] ^ temp[3];
      i++;
   }
}

void AddRoundKey(unsigned char * state, unsigned char * roundKey) {
    for (int i = 0; i < 16; i++) {
        state[i] ^= roundKey[i];
    }
}

void SubBytes() {
   int i,j;
   for (i=0 ; i < 4 ; i++) {
      for (j=0 ; j < 4 ; j++) {
          state[i][j] = sBoxVal(state[i][j]);
      }
   }
}

void ShiftRows() {;
    unsigned char placeHolder;
    // row 1
    placeHolder = state[1][0];
    state[1][0] = state[1][1];
    state[1][1] = state[1][2];
    state[1][2] = state[1][3];
    state[1][3] = placeHolder;

    // row 2
    placeHolder = state[2][0];
    state[2][0] = state[2][2];
    state[2][2] = placeHolder;
    placeHolder = state[2][1];
    state[2][1] = state[2][3];
    state[2][3] = placeHolder;

    // row 3
    placeHolder = state[3][0];
    state[3][0] = state[3][3];
    state[3][3] = state[3][2];
    state[3][2] = state[3][1];
    state[3][1] = placeHolder;
 }

void MixColumns() {
      unsigned char tempArr [4][4];
      for(int i=0;i<4;i++)
        {
          tempArr[0][i] = (0x0E * state[0][i]) ^ (0x0B * state[1][i]) ^ (0x0D * state[2][i]) ^ (0x09 * state[3][i]);
          tempArr[1][i] = (0x09 * state[0][i]) ^ (0x0E * state[1][i]) ^ (0x0B * state[2][i]) ^ (0x0D * state[3][i]);
          tempArr[2][i] = (0x0D * state[0][i]) ^ (0x09 * state[1][i]) ^ (0x0E * state[2][i]) ^ (0x0B * state[3][i]);
          tempArr[3][i] = (0x0B * state[0][i]) ^ (0x0D * state[1][i]) ^ (0x09 * state[2][i]) ^ (0x0E * state[3][i]);
        }
      for(int i=0;i<4;i++)
        for(int j=0;j<4;j++)
          state[j][i] = tempArr[j][i];

    }

void Round(unsigned char * plaintext, unsigned char * key) {
    SubBytes();
    ShiftRows();
    MixColumns();
    AddRoundKey(plaintext, key);
}

// last round is the same as every other round but does not mix columns
void FinalRound(unsigned char * plaintext, unsigned char * key) {
   SubBytes();
   ShiftRows();
   AddRoundKey(plaintext, key);
}

void AESEncrypt(unsigned char * plaintext, unsigned char * expandedKey, unsigned char * encryptedMessage) {
    unsigned char state [16]; // original message
    
   for (int i = 0; i < 16; i++){
        for (int j = 0; j < myPlainText.length(); j++)
        state[i] = myPlainText[j] ;
    }
    
    // First Round
    AddRoundKey(state, expandedKey);
    
    for (int i = 0; i < numCycles; i++) {
        Round(state, expandedKey + (16 * (i+1)));
    }
    
    // Final Round
    SubBytes();
    ShiftRows();
    AddRoundKey(plaintext, expandedKey);
    
    // Copy encrypted state to buffer
    for (int i = 0; i < 16; i++){
        for (int j = 0; j < myPlainText.length(); j++)
        encryptedMessage[i] = myPlainText[j] ;
    }
}
